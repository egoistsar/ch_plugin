#!/bin/bash

# Dante Server configuration functions
# Author: GitHub - egoistsar
# Repository: https://github.com/egoistsar/s5proxyserver

# Function to generate Dante configuration
generate_dante_config() {
    local port=$1
    local interface=$2
    
    display_message "${messages["generating_config"]}"
    log_message "Generating Dante configuration for port $port on interface $interface"

    cat << EOF
# Dante Server configuration generated by setup script
# https://github.com/egoistsar/s5proxyserver

# Basic configuration
logoutput: /var/log/sockd/sockd.log

# Network interface and addresses
internal: $interface port = $port
external: $interface

# Authentication methods
socksmethod: username

# Client-server communication rules
client pass {
    from: 0.0.0.0/0 to: 0.0.0.0/0
    log: error connect disconnect
}

# Server-client access rules 
socks pass {
    from: 0.0.0.0/0 to: 0.0.0.0/0
    log: error connect disconnect
    socksmethod: username
}

# PAM authentication configuration
user.privileged: root
user.notprivileged: nobody
user.libwrap: nobody
EOF
}

# Function to set up authentication
setup_authentication() {
    display_message "${messages["setting_up_auth"]}"
    log_message "Setting up PAM authentication for Dante Server"
    
    # Create PAM configuration for sockd
    cat > /etc/pam.d/sockd << EOF
auth required pam_pwdfile.so pwdfile=/etc/sockd/passwd
account required pam_permit.so
EOF
    
    # Create passwd directory if it doesn't exist
    mkdir -p /etc/sockd
    touch /etc/sockd/passwd
    chmod 600 /etc/sockd/passwd
}

# Function to create systemd service
create_systemd_service() {
    display_message "${messages["creating_service"]}"
    log_message "Creating systemd service for Dante Server"
    
    cat > /etc/systemd/system/sockd.service << EOF
[Unit]
Description=Dante SOCKS Server
After=network.target

[Service]
Type=simple
ExecStart=/usr/sbin/sockd -f /etc/dante/sockd.conf
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF
}

# Function to configure firewall
configure_firewall() {
    local port=$1
    display_message "${messages["configuring_firewall"]}"
    log_message "Configuring firewall to allow connections on port $port"
    
    # Allow proxy port in iptables
    iptables -I INPUT -p tcp --dport "$port" -j ACCEPT
    
    # Try to make iptables rules persistent depending on what's available
    if command -v iptables-save > /dev/null && [ -d /etc/iptables ]; then
        iptables-save > /etc/iptables/rules.v4
    elif command -v netfilter-persistent > /dev/null; then
        netfilter-persistent save
    else
        # Create a systemd service to restore iptables rules on boot
        cat > /etc/systemd/system/iptables-restore.service << EOF
[Unit]
Description=Restore iptables firewall rules
Before=network-pre.target

[Service]
Type=oneshot
ExecStart=/sbin/iptables-restore /etc/iptables-rules
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF
        iptables-save > /etc/iptables-rules
        chmod 600 /etc/iptables-rules
        systemctl enable iptables-restore.service
    fi
}
